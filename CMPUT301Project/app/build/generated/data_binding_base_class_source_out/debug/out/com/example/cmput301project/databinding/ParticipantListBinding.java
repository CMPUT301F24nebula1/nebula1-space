// Generated by view binder compiler. Do not edit!
package com.example.cmput301project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cmput301project.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ParticipantListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout barLayout;

  @NonNull
  public final LinearLayout bottomSection;

  @NonNull
  public final MaterialButton btnCanceled;

  @NonNull
  public final MaterialButton btnFinal;

  @NonNull
  public final MaterialButton btnSelected;

  @NonNull
  public final MaterialButton btnWaitlist;

  @NonNull
  public final TextView capacityText;

  @NonNull
  public final MaterialButtonToggleGroup listToggleGroup;

  @NonNull
  public final ConstraintLayout mainLayout;

  @NonNull
  public final MaterialButton notifyButton;

  @NonNull
  public final ListView participantList;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final Button removeButton;

  @NonNull
  public final MaterialButton selectButton;

  @NonNull
  public final MaterialButton selectButton3;

  @NonNull
  public final Slider slider;

  @NonNull
  public final MaterialToolbar toolbarSelect;

  private ParticipantListBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppBarLayout barLayout, @NonNull LinearLayout bottomSection,
      @NonNull MaterialButton btnCanceled, @NonNull MaterialButton btnFinal,
      @NonNull MaterialButton btnSelected, @NonNull MaterialButton btnWaitlist,
      @NonNull TextView capacityText, @NonNull MaterialButtonToggleGroup listToggleGroup,
      @NonNull ConstraintLayout mainLayout, @NonNull MaterialButton notifyButton,
      @NonNull ListView participantList, @NonNull ProgressBar progressBar,
      @NonNull Button removeButton, @NonNull MaterialButton selectButton,
      @NonNull MaterialButton selectButton3, @NonNull Slider slider,
      @NonNull MaterialToolbar toolbarSelect) {
    this.rootView = rootView;
    this.barLayout = barLayout;
    this.bottomSection = bottomSection;
    this.btnCanceled = btnCanceled;
    this.btnFinal = btnFinal;
    this.btnSelected = btnSelected;
    this.btnWaitlist = btnWaitlist;
    this.capacityText = capacityText;
    this.listToggleGroup = listToggleGroup;
    this.mainLayout = mainLayout;
    this.notifyButton = notifyButton;
    this.participantList = participantList;
    this.progressBar = progressBar;
    this.removeButton = removeButton;
    this.selectButton = selectButton;
    this.selectButton3 = selectButton3;
    this.slider = slider;
    this.toolbarSelect = toolbarSelect;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ParticipantListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ParticipantListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.participant_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ParticipantListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bar_layout;
      AppBarLayout barLayout = ViewBindings.findChildViewById(rootView, id);
      if (barLayout == null) {
        break missingId;
      }

      id = R.id.bottom_section;
      LinearLayout bottomSection = ViewBindings.findChildViewById(rootView, id);
      if (bottomSection == null) {
        break missingId;
      }

      id = R.id.btn_canceled;
      MaterialButton btnCanceled = ViewBindings.findChildViewById(rootView, id);
      if (btnCanceled == null) {
        break missingId;
      }

      id = R.id.btn_final;
      MaterialButton btnFinal = ViewBindings.findChildViewById(rootView, id);
      if (btnFinal == null) {
        break missingId;
      }

      id = R.id.btn_selected;
      MaterialButton btnSelected = ViewBindings.findChildViewById(rootView, id);
      if (btnSelected == null) {
        break missingId;
      }

      id = R.id.btn_waitlist;
      MaterialButton btnWaitlist = ViewBindings.findChildViewById(rootView, id);
      if (btnWaitlist == null) {
        break missingId;
      }

      id = R.id.capacity_text;
      TextView capacityText = ViewBindings.findChildViewById(rootView, id);
      if (capacityText == null) {
        break missingId;
      }

      id = R.id.listToggleGroup;
      MaterialButtonToggleGroup listToggleGroup = ViewBindings.findChildViewById(rootView, id);
      if (listToggleGroup == null) {
        break missingId;
      }

      ConstraintLayout mainLayout = (ConstraintLayout) rootView;

      id = R.id.notify_button;
      MaterialButton notifyButton = ViewBindings.findChildViewById(rootView, id);
      if (notifyButton == null) {
        break missingId;
      }

      id = R.id.participant_list;
      ListView participantList = ViewBindings.findChildViewById(rootView, id);
      if (participantList == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.remove_button;
      Button removeButton = ViewBindings.findChildViewById(rootView, id);
      if (removeButton == null) {
        break missingId;
      }

      id = R.id.select_button;
      MaterialButton selectButton = ViewBindings.findChildViewById(rootView, id);
      if (selectButton == null) {
        break missingId;
      }

      id = R.id.select_button3;
      MaterialButton selectButton3 = ViewBindings.findChildViewById(rootView, id);
      if (selectButton3 == null) {
        break missingId;
      }

      id = R.id.slider;
      Slider slider = ViewBindings.findChildViewById(rootView, id);
      if (slider == null) {
        break missingId;
      }

      id = R.id.toolbar_select;
      MaterialToolbar toolbarSelect = ViewBindings.findChildViewById(rootView, id);
      if (toolbarSelect == null) {
        break missingId;
      }

      return new ParticipantListBinding((ConstraintLayout) rootView, barLayout, bottomSection,
          btnCanceled, btnFinal, btnSelected, btnWaitlist, capacityText, listToggleGroup,
          mainLayout, notifyButton, participantList, progressBar, removeButton, selectButton,
          selectButton3, slider, toolbarSelect);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
